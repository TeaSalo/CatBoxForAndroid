name: Test Build
on:
  push:
    branches:
      - dev

jobs:
  libcore:
    name: Native Build (LibCore)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # - name: Get Latest Tag
      #   run: |
      #     git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      #     latest_tag=$(git describe --abbrev=0 --tags)
      #     echo "TAG=$latest_tag" >> $GITHUB_ENV
      - name: Golang Status
        run: find buildScript libcore/*.sh | xargs cat | sha1sum > golang_status
      - name: Libcore Status
        run: git ls-files libcore | xargs cat | sha1sum > libcore_status
      - name: LibCore Cache
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            app/libs/libcore.aar
          key: ${{ hashFiles('.github/workflows/*', 'golang_status', 'libcore_status') }}
      - name: Golang Cache
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: build/golang
          key: go-${{ hashFiles('.github/workflows/*', 'golang_status') }}
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./run init action go && ./run lib core
  build:
    name: Build OSS APK
    runs-on: ubuntu-latest
    needs:
      - libcore
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Golang Status
        run: find buildScript libcore/*.sh | xargs cat | sha1sum > golang_status
      - name: Libcore Status
        run: git ls-files libcore | xargs cat | sha1sum > libcore_status
      - name: LibCore Cache
        uses: actions/cache@v3
        with:
          path: |
            app/libs/libcore.aar
          key: ${{ hashFiles('.github/workflows/*', 'golang_status', 'libcore_status') }}
      - name: Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-oss-${{ hashFiles('**/*.gradle.kts') }}
      - name: Gradle Build
        env:
          BUILD_PLUGIN: none
        run: |
          curl -Lo  app/src/main/assets/yacd.zip https://github.com/MetaCubeX/Yacd-meta/archive/refs/heads/gh-pages.zip
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "ndk.dir=${ANDROID_HOME}/ndk/25.0.8775105" >> local.properties
          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
          ./run init action gradle
          ./gradlew clean app:assembleOssRelease
          APK=$(find app/build/outputs/apk -name '*arm64-v8a*.apk')
          APK=$(dirname $APK)
          echo "APK=$APK" >> $GITHUB_ENV
      - uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: ${{ env.APK }}
          signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_PASSWORD }}
      - name: Clean Up
        run: |
          cd ${{ env.APK }}
          rm signingKey.jks
          rm $(ls | grep -v '\-signed')
          for file in NB4A*.apk; do
              new_file="${file/NB4A/CB4A}"
              new_file="${new_file//unsigned-/}"
              mv "$file" "$new_file"
          done
      - uses: actions/upload-artifact@v3
        with:
          name: APKs
          path: ${{ env.APK }}